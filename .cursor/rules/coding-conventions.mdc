---
description: 
globs: 
alwaysApply: false
---
# JDK Switch 编码规范

本项目遵循 Go 语言标准编码规范和最佳实践。

## 命名规范

- 包名：使用小写，单个单词，例如 `config`、`jdk`
- 函数和方法：使用驼峰命名法，公开函数首字母大写，例如 `LoadConfig`、`SetJavaHome`
- 变量：使用驼峰命名法，例如 `configPath`、`jdkPath`
- 常量：使用全大写，例如 `ConfigDir`、`ConfigFile`

## 代码格式

- 使用 `gofmt` 或 `go fmt` 格式化代码
- 缩进使用制表符（tab）而非空格
- 行长度不超过100字符
- 函数参数及返回值一般应该在一行内，除非过长

## 错误处理

- 函数返回错误时使用 `fmt.Errorf` 添加上下文信息
- 在发生错误时优先返回错误，而不是尝试继续执行
- 错误信息使用中文，方便用户理解

## 注释规范

- 每个包、函数、类型应该有详细的注释
- 注释应说明用途、输入参数和返回值
- 复杂的逻辑应有行内注释说明

## 文件组织

- 相关的函数应该放在同一个文件中
- 每个文件应该专注于一个功能模块
- 导入包应该按照标准库、第三方库、项目内部包的顺序组织

## 跨平台代码规范

- 使用构建标签（build tags）区分不同平台的实现
- 平台特定代码应放入专用文件（如 `registry.go` 和 `registry_other.go`）
- 对于不支持的平台，函数应返回明确的错误信息
- 在测试中考虑跨平台兼容性

## 性能监控代码规范

- 性能监控代码应该可以通过编译标签轻松启用或禁用
- 计时代码应使用 `time.Now()` 和 `time.Since()` 实现
- 性能指标输出应使用一致的格式，便于分析
- 性能监控不应影响主要功能的逻辑流程
- 避免在底层函数中添加计时代码，应在调用点添加

