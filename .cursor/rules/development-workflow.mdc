---
description: 
globs: 
alwaysApply: false
---
# JDK Switch 开发工作流

本文档描述了项目的开发工作流程和最佳实践。

## 开发环境设置

1. 安装 Go 1.20 或更高版本
2. 克隆项目仓库
3. 在项目根目录运行 `go mod tidy` 确保依赖正确
4. 确保拥有管理员权限（测试环境变量设置需要）

## 构建流程

开发版本构建：
```
go build
```

发布版本构建：
```
go build -ldflags="-s -w" -o jdk-switch.exe
```

## 测试

在进行任何代码修改前，应该先编写测试：

```
go test ./...
```

单元测试：
```
go test ./config
go test ./jdk
```

## 性能测试与优化

在更改代码前后进行性能测试：

1. 使用内置的计时功能对关键操作进行计时：
   ```
   # 备份环境变量耗时
   # 读取环境变量耗时
   # 修改环境变量耗时
   # 广播环境变量变更耗时
   # 总耗时
   ```

2. 识别性能瓶颈：
   - 广播环境变量通常是最耗时的操作
   - 注册表操作可能因系统原因出现延迟
   - PATH变量过长可能导致处理时间增加

3. 优化策略：
   - 减少不必要的注册表读写操作
   - 优化环境变量处理逻辑
   - 考虑并行处理独立的环境变量（如果安全）

4. 性能对比：
   - 记录优化前后的关键操作耗时
   - 使用大型PATH环境变量进行压力测试
   - 测试在不同Windows版本上的性能表现

## 跨平台测试

虽然主要功能仅支持Windows，但应保证非Windows平台上的表现：

```
GOOS=linux go test ./...
GOOS=darwin go test ./...
```

## 代码提交流程

1. 创建功能分支
2. 在分支上开发新功能或修复bug
3. 运行测试确保所有功能正常
4. 提交代码前使用 `go fmt ./...` 格式化代码
5. 提交拉取请求并等待代码审查

## 版本发布流程

1. 更新 [main.go](mdc:main.go) 中的版本号
2. 更新 [README.md](mdc:README.md) 中的文档
3. 创建发布标签
4. 构建发布版本
5. 将二进制文件上传到发布页面

## 性能优化

进行性能优化时应遵循以下步骤：

1. 使用性能分析工具识别瓶颈
2. 优先优化耗时最长的操作
3. 保证优化前后的功能一致性
4. 记录优化前后的性能差异

